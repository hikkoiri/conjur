#!/bin/bash -e

function print_help() {
  cat << EOF
NAME
    cli - Development tool to simplify working with a Conjur container.

SYNOPSIS
    cli [global options] command [command options] [arguments...]
GLOBAL OPTIONS
    --help                                    - Show this message
COMMANDS
    exec                                      - Steps into the running Conjur container, into a bash shell.

    key                                       - Displays the admin user API key

    policy load <account> <policy/path.yml>   - Loads a conjur policy into the provided account.
EOF
exit
}

function print_exec_help() {
  cat << EOF
NAME
    exec - Steps into the running Conjur container, into a bash shell.

SYNOPSIS
    exec [global options] command [command options] [arguments...]
GLOBAL OPTIONS
    --help                                    - Show this message
COMMANDS
    --authn-oidc    Enables OIDC features
    --authn-azure   Enables Azure features
    --authn-gce [GCE_INSTANCE_NAME] Enables GCE features passing in the Google Compute Engine VM name
EOF
exit
}

function enable_gce() {
  local gce_instance_name="$1"

  if [ -z "$gce_instance_name" ]; then
    local prgname=$(basename "$0")
    echo "Missing GCE instance name. Usage ./$prgname exec --authn-gce [GCE_INSTANCE_NAME]"
    exit 1
  fi

  echo "Obtain GCE ID tokens from GCE instance: '$gce_instance_name' and persist tokens"
  ../ci/authn-gce/get_gce_id_tokens.sh "$gce_instance_name"

  gce_token_file="../ci/authn-gce/tokens/gce_token_valid"
  if ! [ -f "$gce_token_file" ]; then
    echo "GCE token file $gce_token_file does not exist."
    exit 1
  fi

  decoded_gce_token_payload=$(_get_gce_token_payload "$gce_token_file")

  echo "Setting GCE details as env variables"
  GCE_PROJECT_ID="$(echo "$decoded_gce_token_payload" | jq -r '.google.compute_engine.project_id')"
  GCE_INSTANCE_NAME="$(echo "$decoded_gce_token_payload" | jq -r '.google.compute_engine.instance_name')"
  GCE_SERVICE_ACCOUNT_ID="$(echo "$decoded_gce_token_payload" | jq -r '.sub')"
  GCE_SERVICE_ACCOUNT_EMAIL="$(echo "$decoded_gce_token_payload" | jq -r '.email')"

  # It is sufficient to check only the project id env value to determine if the
  # token is valid and contains the mandatory compute_engine claim.
  if [ -z "$GCE_PROJECT_ID" ]; then
    echo "Failed extracting env parameters from token"
    exit 1
  fi

  local gce_env_args="-e GCE_INSTANCE_NAME=$GCE_INSTANCE_NAME \
                      -e GCE_SERVICE_ACCOUNT_ID=$GCE_SERVICE_ACCOUNT_ID \
                      -e GCE_SERVICE_ACCOUNT_EMAIL=$GCE_SERVICE_ACCOUNT_EMAIL \
                      -e GCE_PROJECT_ID=$GCE_PROJECT_ID"

  env_args="$env_args $gce_env_args"
  echo "Finished setting GCE details as env variables."
}

_get_gce_token_payload() {
  local gce_token_file="$1"

  # read token and set env vars
  gce_token=$(cat "$gce_token_file")

  source ../ci/jwt/decode_token.sh

  decoded_gce_token_payload=$(decode_jwt_payload "$gce_token")

  echo "$decoded_gce_token_payload"
}

function enable_oidc() {
  echo "Extracting keycloak variables & setting as env variables"

  local keycloak_env_args=''
  keycloak_env_args="$(set -o pipefail; docker-compose exec -T oidc-keycloak printenv | grep KEYCLOAK | sed 's/.*/-e &/') \
                     -e PROVIDER_URI=https://keycloak:8443/auth/realms/master \
                     -e PROVIDER_INTERNAL_URI=http://keycloak:8080/auth/realms/master/protocol/openid-connect \
                     -e ID_TOKEN_USER_PROPERTY=preferred_username"

  env_args="$env_args $keycloak_env_args"
}

function enable_azure() {

  ../ci/authn-azure/check_dependencies.sh

  echo "Setting Azure details as env variables"

  local azure_env_args="-e AZURE_TENANT_ID=$AZURE_TENANT_ID \
                        -e AZURE_AUTHN_INSTANCE_IP=$AZURE_AUTHN_INSTANCE_IP \
                        -e AZURE_AUTHN_INSTANCE_USERNAME=$AZURE_AUTHN_INSTANCE_USERNAME \
                        -e AZURE_AUTHN_INSTANCE_PASSWORD=$AZURE_AUTHN_INSTANCE_PASSWORD \
                        -e AZURE_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID \
                        -e AZURE_RESOURCE_GROUP=$AZURE_RESOURCE_GROUP \
                        -e USER_ASSIGNED_IDENTITY=$USER_ASSIGNED_IDENTITY \
                        -e USER_ASSIGNED_IDENTITY_CLIENT_ID=$USER_ASSIGNED_IDENTITY_CLIENT_ID \
                        -e SYSTEM_ASSIGNED_IDENTITY=$SYSTEM_ASSIGNED_IDENTITY"

  env_args="$env_args $azure_env_args"
}

unset COMPOSE_PROJECT_NAME

while true ; do
  case "$1" in
    -h | --help ) print_help ; shift ;;
    exec )
      api_key=$(docker-compose exec -T conjur conjurctl role retrieve-key cucumber:user:admin | tr -d '\r')
      env_args="-e CONJUR_AUTHN_API_KEY=$api_key"

      case "$2" in
        -h | --help ) print_exec_help ; shift ;;
        --authn-oidc ) enable_oidc ; shift ;;
        --authn-azure ) enable_azure ; shift ;;
        --authn-gce ) enable_gce "$3" ; shift ;;
        * ) if [ -z "$2" ]; then shift ; else echo "$2 is not a valid option"; exit 1; fi;;
      esac

      docker exec $env_args -it --detach-keys 'ctrl-\' $(docker-compose ps -q conjur) bash
     shift ;;
    policy )
      case "$2" in
        load )
          account="$3"
          policy_file=$4
          docker-compose exec conjur conjurctl policy load "$account" "/src/conjur-server/$policy_file"
          shift 4 ;;
        * ) if [ -z "$1" ]; then break; else echo "$1 is not a valid option"; exit 1; fi;;
      esac ;;
    key ) docker-compose exec -T conjur conjurctl role retrieve-key cucumber:user:admin ; shift ;;
     * ) if [ -z "$1" ]; then break; else echo "$1 is not a valid option"; exit 1; fi;;
  esac
done
